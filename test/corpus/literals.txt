==================
hex literal
==================

0x0123456789_ABCDEF_abcdef
0X0

---

(module
  (literal
    (int_lit))
  (literal
    (int_lit)))

==================
dec literal
==================

01234_56789
0

---

(module
  (literal
    (int_lit))
  (literal
    (int_lit)))

==================
oct literal
==================

0o0123_4567
0o0

---

(module
  (literal
    (int_lit))
  (literal
    (int_lit)))

==================
bin literal
==================

0b0_1
0B0

---

(module
  (literal
    (int_lit))
  (literal
    (int_lit)))

==================
uint8-64 literal
==================

01234_56789'i8
01234_56789'I8
0B101'i16
0o1234_567'i32
0X1234_56789_abcDEF'i64
01234_56789'u
01234_56789'u8
01234_56789'U8
0B101'u16
0o1234_567'u32
0X1234_56789_abcDEF'u64
01234_56789i8
01234_56789I8
0B101i16
0o1234_567i32
0X1234_56789_abcDEFi64
01234_56789u
01234_56789u8
01234_56789U8
0B101u16
0o1234_567u32
0X1234_56789_abcDEFu64

---

(module
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix)))
  (literal
    (int_lit
      (int_suffix))))

==================
float literal
==================

123.123e-123
123.123
123e123
123e+123

---

(module
  (literal
    (float_lit
      (exponent)))
  (literal
    (float_lit))
  (literal
    (float_lit
      (exponent)))
  (literal
    (float_lit
      (exponent))))

==================
float32 literal
==================

0xff'f
0xff'f32
0b01f
0o36'f32
123.123f
123.123e123f

---

(module
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (float_lit
      (float_suffix)))
  (literal
    (float_lit
      (exponent)
      (float_suffix))))

==================
float64 literal
==================

0xff'f
0xff'f64
0b01d
0o36'D
123.123f
123.123e123f

---

(module
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (int_lit
      (float_suffix)))
  (literal
    (float_lit
      (float_suffix)))
  (literal
    (float_lit
      (exponent)
      (float_suffix))))

==================
custom numeric literal
==================

0o34'sdf_89_coo
13.123e-743'asdf_89

---

(module
  (literal
    (int_lit
      (custom_numeric_lit_suffix)))
  (literal
    (float_lit
      (exponent)
      (custom_numeric_lit_suffix))))


==================
char literal
==================

'0'
'1'
'2'
'3'
'4'
'5'
'6'
'7'
'8'
'9'
'a'
'b'
'c'
'd'
'e'
'f'
'g'
'h'
'i'
'j'
'k'
'l'
'm'
'n'
'o'
'p'
'q'
'r'
's'
't'
'u'
'v'
'w'
'x'
'y'
'z'
'A'
'B'
'C'
'D'
'E'
'F'
'G'
'H'
'I'
'J'
'K'
'L'
'M'
'N'
'O'
'P'
'Q'
'R'
'S'
'T'
'U'
'V'
'W'
'X'
'Y'
'Z'
'!'
'@'
'#'
'$'
'%'
'^'
'&'
'*'
'('
')'
'{'
'}'
'['
']'
'<'
'>'
'`'
'~'
'_'
'-'
'='
'+'
'/'
'?'
'.'
','
';'
':'
'"'
'|'
' '
'\r'
'\c'
'\n'
'\l'
'\f'
'\t'
'\v'
'\\'
'\"'
'\''
'\a'
'\b'
'\e'
'\xa9'
'\123'

---

(module
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq)))
  (literal
    (char_lit
      (char_esc_seq))))

==================
string literal
==================

"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
"!@#$%^&*(){}[]<>`~_-=+/?.,;:'|"
"\r\c\n\l\f\t\v\\\"\'\a\b\e\xa9\123\uabcd\u{012345}"

---

(module
  (literal
    (string_lit))
  (literal
    (string_lit))
  (literal
    (string_lit
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq)
      (str_esc_seq))))

==================
triple string literal
==================

""""0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
"!@#$%^&*(){}[]<>`~_-=+/?.,;:'|"
"\r\c\n\l\f\t\v\\\"\'\a\b\e\xa9\123\uabcd\u{012345}
""""
r"""same"""
""""""""""""""""""""""""

---

(module
  (literal
    (multi_string_lit))
  (literal
    (multi_string_lit
      (raw_string_prefix)))
  (literal
    (multi_string_lit)))

==================
raw string literal
==================

r"heya"
R"hi""h\ni"
r""

---

(module
  (literal
    (raw_string_lit
      (raw_string_prefix)))
  (literal
    (raw_string_lit
      (raw_string_prefix)))
  (literal
    (raw_string_lit
      (raw_string_prefix))))

==================
generalized string literal
==================

`mich_404   _-=+-_="|\`"tree lhfea lakshd;fl"
mich_404"tree lhfea lakshd;fl"
b""
re"test"
rex"test"
reX"test"

---

(module
  (literal
    (raw_string_lit
      (generalized_string_prefix
        (symbol
          (ticked_identifier)))))
  (literal
    (raw_string_lit
      (generalized_string_prefix
        (symbol
          (identifier)))))
  (literal
    (raw_string_lit
      (generalized_string_prefix
        (symbol
          (identifier)))))
  (literal
    (raw_string_lit
      (regex_string_prefix)))
  (literal
    (raw_string_lit
      (regex_string_prefix)))
  (literal
    (raw_string_lit
      (regex_string_prefix))))

==================
generalized triple string literal
==================

hgasld_1234r"""sa
asdfj
laskhdf//lkhqwe;rme"""
a""""0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
"!@#$%^&*(){}[]<>`~_-=+/?.,;:'|"
"\r\c\n\l\f\t\v\\\"\'\a\b\e\xa9\123\uabcd\u{012345}
""""
`b a c`""""""""""""""""""""""""
re"""test"""
rex"""
test""""""""
reX"""
test"""

---

(module
  (literal
    (multi_string_lit
      (generalized_string_prefix
        (symbol
          (identifier)))))
  (literal
    (multi_string_lit
      (generalized_string_prefix
        (symbol
          (identifier)))))
  (literal
    (multi_string_lit
      (generalized_string_prefix
        (symbol
          (ticked_identifier)))))
  (literal
    (multi_string_lit
      (regex_string_prefix)))
  (literal
    (multi_string_lit
      (regex_string_prefix)))
  (literal
    (multi_string_lit
      (regex_string_prefix))))


==================
interpolated_str_lit
==================

& "hi{'i'}"
&"hi{'i'}hi{'i'}"
fmt"hi{ 'i' }"
fmt"hi{'i'}hi{'i'}"

---

(module
  (literal
    (interpolated_string_lit
      (interpolated_string_prefix)
      (string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_string_lit
      (interpolated_string_prefix)
      (string_interpolation
        (expr
          (literal
            (char_lit))))
      (string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_string_lit
      (interpolated_string_prefix)
      (string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_string_lit
      (interpolated_string_prefix)
      (string_interpolation
        (expr
          (literal
            (char_lit))))
      (string_interpolation
        (expr
          (literal
            (char_lit)))))))

==================
interpolated_triplestr_lit
==================

& """hi{'i'}hi{'i'}"""
&"""hi{'i'}hi{'i'}"""
&"""hi{'i'}
hi{'i'}"""
fmt"""hi{'i'}hi{'i'}"""
fmt"""hi{ 'i' }
hi{'i'}"""

---

(module
  (literal
    (interpolated_multi_string_lit
      (interpolated_string_prefix)
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_multi_string_lit
      (interpolated_string_prefix)
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_multi_string_lit
      (interpolated_string_prefix)
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_multi_string_lit
      (interpolated_string_prefix)
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))))
  (literal
    (interpolated_multi_string_lit
      (interpolated_string_prefix)
      (multi_string_interpolation
        (expr
          (literal
            (char_lit))))
      (multi_string_interpolation
        (expr
          (literal
            (char_lit)))))))

==================
nil literal
==================

nil

---

(module
  (literal
    (nil_lit)))

==================
bool literal
==================

true
false

---

(module
  (literal
    (bool_lit))
  (literal
    (bool_lit)))





